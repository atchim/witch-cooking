@gd
  {builtin,
   word       = {builtin},
   definition = {No desenvolvimento de software, \textit{builtin} é um termo
                 utilizado para descrever funções ou comandos que são
                 incorporados no próprio sistema ou ambiente de programação, em
                 contraste com funções ou comandos definidos pelo usuário ou
                 programador. Por exemplo, em Python, a função \textit{print} é
                 um exemplo de função \textit{builtin}. Essas funções ou
                 comandos \textit{builtin} estão prontamente disponíveis, o que
                 significa que não é necessário definir ou importá-los
                 explicitamente por parte do usuário ou programador}}

@gd
  {code-folding,
   word       = {code folding},
   definition = {No desenvolvimento de software, \textit{code folding} é uma
                 \textit{feature} que permite a ocultação seletiva de partes de
                 um documento ou código-fonte, permitindo ao usuário ou
                 programdor visualizar apenas as seções de interesse. Esse
                 recurso é especialmente útil ao lidar com grandes volumes de
                 informações, possibilitando uma melhor organização e foco em
                 seções específicas. O \textit{code folding} é comumente
                 utilizado em ambientes de programação que possuem estruturas
                 hierárquicas, como árvores ou blocos aninhados, facilitando a
                 navegação e a compreensão do código}}

@gd
  {feature,
   word       = {feature},
   definition = {Na programação de computadores, uma \textit{feature} é uma
                 funcionalidade específica ou capacidade de um software que
                 agrega valor ao sistema. Uma \textit{feature} pode ser um
                 componente, uma função, um conjunto de comandos ou qualquer
                 outra característica que ofereça uma determinada
                 funcionalidade aos usuários do software. Ela pode abranger
                 desde recursos básicos até funcionalidades mais avançadas e
                 personalizadas, e é projetada para atender às necessidades e
                 demandas dos usuários, melhorar a usabilidade do software e
                 fornecer uma experiência mais completa}}

@gd
  {fifo,
   word = {FIFO},
   definition = {Na computação e na teoria de sistemas, \textit{FIFO} é um
                 acrônimo para \textit{first in, first out} (o primeiro a
                 entrar é o primeiro a sair), um método para organizar a
                 manipulação de uma estrutura de dados (geralmente,
                 especificamente um buffer de dados) onde a entrada mais antiga
                 (primeira), ou ``cabeça'' da fila, é processada primeiro}}

@gd
  {homoiconic,
   word       = {homoicônico},
   definition = {Na programação de computadores, a homoiconicidade (das
                 palavras gregas \textit{homo-}, que significa ``o mesmo'', e
                 \textit{icon}, que significa ``representação'') é uma
                 propriedade de algumas linguagens de programação. Uma
                 linguagem é homoicônica se um programa escrito nela pode ser
                 manipulado como dados utilizando a própria linguagem,
                 permitindo inferir a representação interna do programa apenas
                 lendo o próprio programa. Essa propriedade é frequentemente
                 resumida dizendo que a linguagem trata o
                 \textbf{código como dados}}}

@gd
  {opinionated,
   word       = {opinionated},
   definition = {No desenvolvimento de software, \textit{opinionated} é um
                 termo utilizado para se referir a um conjunto de práticas
                 preestabelecidas sobre como abordar uma determinada tarefa,
                 podendo não permitir customizações ou desvio das abordagens}}

@gd
  {parser,
   word       = {parser},
   definition = {Na programação de computadores, um \textit{parser} (ou
                 analisador) é um componente de software que recebe dados de
                 entrada (frequentemente texto) e constrói uma estrutura de
                 dados -- frequentemente algum tipo de árvore de análise,
                 árvore de sintaxe abstrata ou outra estrutura hierárquica --
                 fornecendo uma representação estrutural da entrada enquanto
                 verifica a sintaxe correta. A análise pode ser precedida ou
                 seguida por outras etapas, ou essas etapas podem ser
                 combinadas em uma única etapa. O \textit{parser} é
                 frequentemente precedido por um analisador léxico
                 (\textit{lexer}) separado, que cria tokens a partir da
                 sequência de caracteres de entrada; alternativamente, esses
                 elementos podem ser combinados na análise sem scanner.
                 \textit{Parsers} podem ser programados manualmente ou podem
                 ser gerados automaticamente ou semi-automaticamente por um
                 gerador de \textit{parser}}}

@gd
  {prettyprinting,
   word       = {prettyprinting},
   definition = {Na programação de computadores, \textit{prettyprinting} é a
                 aplicação de diversas convenções estilísticas de formatação a
                 arquivos de texto, como código-fonte, marcação e conteúdos
                 similares. Essas convenções de formatação podem incluir o uso
                 de estilos de indentação, cores e tipos de fonte diferentes
                 para destacar elementos sintáticos do código-fonte, ou ajustes
                 de tamanho, para tornar o conteúdo mais fácil de ser lido e
                 compreendido por pessoas. \textit{Prettyprinters} para
                 código-fonte são às vezes chamados de formatadores de código
                 ou \textit{beautifiers}},
   short = {pp}}

@gd
  {sexp,
   word       = {s-expression},
   definition = {Na programação de computadores, uma \textit{S-expression} (ou
                 expressão simbólica, abreviada como \textit{sexpr} ou
                 \textit{sexp}) é uma expressão em uma notação de mesmo nome
                 para dados em lista aninhada (estruturados em árvore). As
                 \textit{S-expressions} foram inventadas e popularizadas pela
                 linguagem de programação LISP, que as utiliza tanto para
                 código-fonte quanto para dados},
   short      = {sexp}}

@gd
  {wildcard,
   word       = {wildcard},
   definition = {No software, um \textit{wildcard} é um tipo de espaço
                 reservado geralmente representado por um único caractere --
                 como um asterisco (`*') -- ou símbolo especial, que pode
                 representar:
                 \begin{inparaenum}
                   \item qualquer outro caractere;
                   \item um conjunto de caracteres;
                   \item objetos, elementos, símbolos, etc.; ou até
                   \item nada, ou seja, nenhum caractere ou objeto, elemento,
                         símbolo, etc.
                 \end{inparaenum}
                 Os usos mais comuns de \textit{wildcards} são:
                 \begin{inparaenum}
                   \item em expressões regulares (\textit{regex}), onde um
                         caractere especial é usado para representar um
                         conjunto de caracteres desconhecidos ou variáveis em
                         uma string; e
                   \item na interface de linha de comando, onde as
                         \textit{shells} normalmente disponiblizam o caractere
                         asterisco (`*') para corresponder a nomes de
                         arquivos\end{inparaenum}}}

######################
# Unused Definitions #
######################

@gd
  {diff,
   word = {diff},
   definition = {No desenvolvimento de software, \textit{diff} (ou diferença)
                 se refere à comparação entre duas versões de um arquivo ou
                 conjunto de arquivos. Especificamente, o \textit{diff} mostra
                 as alterações feitas entre as versões, destacando as linhas
                 adicionadas, removidas ou modificadas. O \textit{diff} é
                 comumente utilizado para visualizar e revisar as mudanças
                 feitas no código-fonte durante o processo de desenvolvimento
                 colaborativo}}