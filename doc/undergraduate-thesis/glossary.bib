@gd
  {builtin,
   word       = {builtin},
   definition = {Termo usado na programação para descrever funções ou comandos
                 que fazem parte do próprio sistema ou ambiente de programação,
                 em oposição a funções ou comandos definidos pelo próprio
                 usuário. Por exemplo, em Python, \textit{print} é um comando
                 \textit{builtin} porque faz parte do próprio ambiente de
                 programação, enquanto uma função definida pelo usuário seria
                 algo criado pelo próprio programador para atender às suas
                 necessidades específicas. Esses comandos ou funções
                 \textit{builtin} estão geralmente disponíveis para o usuário
                 em tempo de execução, sem precisar serem definidos ou
                 importados explicitamente no código}}

@gd
  {diff,
   word = {diff},
   definition = {No desenvolvimento de software, \textit{diff} (ou diferença)
                 se refere à comparação entre duas versões de um arquivo ou
                 conjunto de arquivos. Especificamente, o \textit{diff} mostra
                 as alterações feitas entre as versões, destacando as linhas
                 adicionadas, removidas ou modificadas. O \textit{diff} é
                 comumente utilizado para visualizar e revisar as mudanças
                 feitas no código-fonte durante o processo de desenvolvimento
                 colaborativo}}

@gd
  {feature,
   word       = {feature},
   definition = {Característica distintiva de um item de software (por exemplo,
                 desempenho, portabilidade ou funcionalidade)}}

@gd
  {fold,
   word       = {fold},
   definition = {No contexto de editores de texto e IDEs, \textit{fold}
                 geralmente se refere a um recurso que permite esconder (ou
                 "dobrar") um bloco de código ou texto para tornar mais fácil a
                 navegação e a visualização do conteúdo}}

@gd
  {homoiconic,
   word       = {homoicônico},
   definition = {Na programação de computadores, uma linguagem é homoicônica se
                 um programa escrito nela pode ser manipulado como dados usando
                 a linguagem, e assim a representação interna do programa pode
                 ser inferida apenas lendo o próprio programa. Essa propriedade
                 é frequentemente resumida dizendo que a linguagem trata o
                 código como dados}}

@gd
  {opinionated,
   word       = {opinionated},
   definition = {Termo utilizado no desenvolvimento de software para se referir
                 a um conjunto de práticas preestabelecidas sobre como abordar
                 uma determinada tarefa, podendo não permitir customizações ou
                 desvio das abordagens}}

@gd
  {parser,
   word       = {parser},
   definition = {Software que analisa a estrutura sintática de uma sequência de
                 símbolos, geralmente de acordo com uma gramática formal. Ele é
                 comumente utilizado na compilação de linguagens de programação
                 para verificar se o código fonte está escrito corretamente de
                 acordo com as regras da linguagem. O \textit{parser} recebe
                 como entrada o código fonte e produz uma representação interna
                 da estrutura sintática do código em uma forma que possa ser
                 manipulada pelo compilador ou outro programa}}

@gd
  {prettyprinting,
   word       = {prettyprinting},
   definition = {\textit{prettyprinting} é a aplicação de diversas convenções
                 estilísticas de formatação a arquivos de texto, como
                 código-fonte, marcação e conteúdos similares. Essas convenções
                 de formatação podem incluir o uso de estilos de indentação,
                 cores e tipos de fonte diferentes para destacar elementos
                 sintáticos do código-fonte, ou ajustes de tamanho, para tornar
                 o conteúdo mais fácil de ser lido e compreendido por pessoas.
                 \textit{Prettyprinters} para código-fonte são às vezes
                 chamados de formatadores de código ou \textit{beautifiers}}}

@gd
  {sexp,
   word       = {s-expression},
   definition = {Na programação de computadores, uma \textit{S-expression} (ou
                 expressão simbólica, abreviada como \textit{sexpr} ou
                 \textit{sexp}) é uma expressão em uma notação de mesmo nome
                 para dados em lista aninhada (estruturados em árvore). As
                 \textit{S-expressions} foram inventadas e popularizadas pela
                 linguagem de programação LISP, que as utiliza tanto para
                 código-fonte quanto para dados},
   short      = {sexp}}

@gd
  {wildcard,
   word       = {wildcard},
   definition = {Termo usado em várias áreas da computação para se referir a um
                 caractere ou símbolo especial que pode ser usado para
                 representar qualquer outro caractere ou conjunto de caracteres
                 em uma determinada operação. Em geral, o \textit{wildcard} é
                 utilizado para permitir a busca ou correspondência de padrões
                 mais flexíveis e abrangentes em textos, arquivos ou expressões
                 regulares. O uso mais comum de \textit{wildcards} é em
                 expressões regulares, onde um caractere especial é usado para
                 representar um conjunto de caracteres desconhecidos ou
                 variáveis em uma string}}